package com.example.researchproject;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.*;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;


import com.example.researchproject.iam.CartActivity;
import com.example.researchproject.iam.ChatAdapter;
import com.example.researchproject.iam.ChatMessage;
import com.example.researchproject.iam.Post;
import com.example.researchproject.iam.PostAdapterGrid;
import com.example.researchproject.iam.PostDetailActivity;
import com.example.researchproject.ui.PostActivity;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.firebase.database.*;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import io.noties.markwon.Markwon;
import okhttp3.*;
import android.Manifest;
import android.media.ToneGenerator;
import android.media.AudioManager;
import android.speech.tts.TextToSpeech;
import java.util.Locale;
import java.util.stream.Collectors;


public class MekoAI extends AppCompatActivity {
    private RecyclerView recyclerViewChat;
    private NestedScrollView nestedScrollView;
    private TextView txtSuggestion;
    private ChatAdapter chatAdapter;
    private List<ChatMessage> chatMessages;
    private ImageButton btnSearchAI;
    private EditText edtUserQuery;
    private DatabaseReference databaseReference;
    private GridView gridView;
    private PostAdapterGrid postAdapter;
    private List<Post> filteredFirebaseData = new ArrayList<>();
    private String geminiResponse = "";
    private Button  btnMic;
    private void playBeepSound() {
        ToneGenerator toneGen = new ToneGenerator(AudioManager.STREAM_NOTIFICATION, 100);
        toneGen.startTone(ToneGenerator.TONE_PROP_BEEP, 500); // √Çm b√°o trong 500ms
    }
    private SpeechRecognizer speechRecognizer;
    private TextToSpeech textToSpeech;
    private void initializeTextToSpeech() {
        textToSpeech = new TextToSpeech(this, status -> {
            if (status == TextToSpeech.SUCCESS) {
                int result = textToSpeech.setLanguage(new Locale("vi-VN")); // üáªüá≥ Gi·ªçng n√≥i ti·∫øng Vi·ªát


                if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                    Log.e("TTS", "Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!");
                }
            } else {
                Log.e("TTS", "Kh√¥ng th·ªÉ kh·ªüi t·∫°o TextToSpeech");
            }
        });
    }


    // Gemini API
    private final String API_KEY = "AIzaSyDXMP_Of_Bf5LK2yNFTRbs_fYrwx6DIyHE";
    private final String API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-8b-001:generateContent?key=" + API_KEY;
    BottomNavigationView bottomNavigationView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_meko_ai);
        // üéØ √Ånh x·∫° View
        btnSearchAI = findViewById(R.id.btnSearchAI);
        btnMic = findViewById(R.id.btnMic);
        edtUserQuery = findViewById(R.id.edtUserQuery);
        gridView = findViewById(R.id.gridView);
        String input = "Nay t√¥i ch√°n qu√° √† t√¥i mu·ªën ƒëi du l·ªãch ·ªü V≈©ng T√†u";
        List<String> suggestions = List.of(
                "c·∫ßn th∆°", "s√≥c trƒÉng"
        );
        Set<String> suggestionSet = new HashSet<>(suggestions);
        List<String> keywords = extractKeywords(input, suggestionSet);
        System.out.println(keywords);
        bottomNavigationView = findViewById(R.id.bottom_navigation);
        recyclerViewChat = findViewById(R.id.recyclerViewChat);
        txtSuggestion = findViewById(R.id.txtSuggestion);
        chatMessages = new ArrayList<>();
        chatAdapter = new ChatAdapter(this, chatMessages);
        recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
        nestedScrollView = findViewById(R.id.nestedScrollView);
        txtSuggestion = findViewById(R.id.txtSuggestion);
        recyclerViewChat.setNestedScrollingEnabled(false);
        gridView.setNestedScrollingEnabled(false);
        recyclerViewChat.setLayoutManager(new LinearLayoutManager(this));
        recyclerViewChat.setAdapter(chatAdapter);
        // ‚úÖ K·∫øt n·ªëi Firebase
        databaseReference = FirebaseDatabase.getInstance().getReference("Posts");
        postAdapter = new PostAdapterGrid(this, filteredFirebaseData);
        gridView.setAdapter(postAdapter);
        // üéØ Bottom Navigation
        bottomNavigationView.setOnItemSelectedListener(item -> {
            int itemId = item.getItemId();
            Intent intent = null;
            if (itemId == R.id.nav_home) {
                intent = new Intent(MekoAI.this, HomeMekong.class);
            } else if (itemId == R.id.nav_ai) {
                intent = new Intent(MekoAI.this, MekoAI.class);
            } else if (itemId == R.id.nav_post) {
                intent = new Intent(MekoAI.this, PostActivity.class);
            } else if (itemId == R.id.nav_cart) {
                intent = new Intent(MekoAI.this, CartActivity.class);
            } else if (itemId == R.id.nav_info) {
                intent = new Intent(MekoAI.this, InformationActivity.class);
            }
            if (intent != null) {
                startActivity(intent);
                return true;
            }
            return false;
        });
        // üéØ X·ª≠ l√Ω nh·∫•n v√†o t·ª´ng item trong GridView
        gridView.setOnItemClickListener((parent, view, position, id) -> {
            Post selectedPost = filteredFirebaseData.get(position);
            Intent intent = new Intent(MekoAI.this, PostDetailActivity.class);
            intent.putExtra("postId", selectedPost.getPostId());
            intent.putExtra("title", selectedPost.getTitle());
            intent.putExtra("serviceInfo", selectedPost.getServiceInfo());
            intent.putExtra("price", selectedPost.getPrice());
            intent.putExtra("rentalTime", selectedPost.getRentalTime());
            intent.putExtra("address", selectedPost.getAddress());
            intent.putExtra("contact", selectedPost.getContact());
            intent.putExtra("imageUrl", selectedPost.getImageUrl());
            startActivity(intent);
        });
        // üéØ X·ª≠ l√Ω n√∫t t√¨m ki·∫øm
        btnSearchAI.setOnClickListener(v -> {
            sendUserMessage(); // X·ª≠ l√Ω g·ª≠i c√¢u h·ªèi
        });
        btnMic.setOnClickListener(v -> {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.RECORD_AUDIO}, 1);
            }
            playBeepSound(); // üîà Ph√°t √¢m b√°o hi·ªáu
            startSpeechToText();
        });
        initializeTextToSpeech(); // ‚úÖ ƒê·∫£m b·∫£o kh·ªüi t·∫°o tr∆∞·ªõc khi s·ª≠ d·ª•ng
    }
    // üéØ H√†m L·∫§Y T·ª™ KH√ìA trong d·∫•u ngo·∫∑c ƒë∆°n ()
    // Move this method to the outer class
    private List<String> extractKeywords(String input, Set<String> suggestions) {
        List<String> keywords = new ArrayList<>();
        for (String keyword : suggestions) {
            Pattern pattern = Pattern.compile("\\b" + Pattern.quote(keyword) + "\\b");
            Matcher matcher = pattern.matcher(input);
            if (matcher.find()) {
                keywords.add(keyword);
            }
        }
        return keywords;
    }
    // üî• Firebase Query (Ch·ªâ t√¨m t·ª´ kh√≥a trong d·∫•u ngo·∫∑c)
    private void fetchFilteredFirebase(String keyword) {
        databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                filteredFirebaseData.clear(); // X√≥a tr∆∞·ªõc khi th√™m m·ªõi
                for (DataSnapshot dataSnapshot : snapshot.getChildren()) {
                    Post post = dataSnapshot.getValue(Post.class);
                    if (post != null && containsKeyword(post, keyword)) {
                        filteredFirebaseData.add(post);
                    }
                }
                postAdapter.notifyDataSetChanged();
            }
            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                runOnUiThread(() -> {
                    chatMessages.add(new ChatMessage("‚ùå H·ªá th·ªëng MekongGo ƒëang b·ªã L·ªói : " + error.getMessage(), false));
                    chatAdapter.notifyItemInserted(chatMessages.size() - 1);
                    recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
                });
            }
        });
    }
    private void startSpeechToText() {
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, "vi-VN");
        speechRecognizer.setRecognitionListener(new RecognitionListener() {


            @Override public void onReadyForSpeech(Bundle bundle) {}
            @Override public void onBeginningOfSpeech() {}
            @Override public void onRmsChanged(float v) {}
            @Override public void onBufferReceived(byte[] bytes) {}
            @Override public void onEndOfSpeech() {}
            @Override
            public void onError(int errorCode) {
                String message = getErrorText(errorCode);
                Toast.makeText(MekoAI.this, "L·ªói: " + message, Toast.LENGTH_SHORT).show();
            }
            public  String getErrorText(int errorCode) {
                switch (errorCode) {
                    case SpeechRecognizer.ERROR_AUDIO: return "L·ªói √¢m thanh";
                    case SpeechRecognizer.ERROR_CLIENT: return "L·ªói client";
                    case SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS: return "Thi·∫øu quy·ªÅn";
                    case SpeechRecognizer.ERROR_NETWORK: return "L·ªói m·∫°ng";
                    case SpeechRecognizer.ERROR_NETWORK_TIMEOUT: return "H·∫øt th·ªùi gian m·∫°ng";
                    case SpeechRecognizer.ERROR_NO_MATCH: return "Kh√¥ng kh·ªõp";
                    case SpeechRecognizer.ERROR_RECOGNIZER_BUSY: return "Recognizer ƒëang b·∫≠n";
                    case SpeechRecognizer.ERROR_SERVER: return "L·ªói m√°y ch·ªß";
                    case SpeechRecognizer.ERROR_SPEECH_TIMEOUT: return "H·∫øt th·ªùi gian n√≥i";
                    default: return "Kh√¥ng r√µ l·ªói";
                }
            }
            @Override
            public void onResults(Bundle bundle) {
                ArrayList<String> results = bundle.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
                if (results != null && results.size() > 0) {
                    String spokenText = results.get(0);
                    edtUserQuery.setText(spokenText); // ‚úÖ G√°n vƒÉn b·∫£n v√†o √¥ nh·∫≠p
                    sendUserMessage(); // üì§ T·ª± ƒë·ªông g·ª≠i c√¢u h·ªèi ngay khi c√≥ k·∫øt qu·∫£
                }
            }
            @Override public void onPartialResults(Bundle bundle) {}
            @Override public void onEvent(int i, Bundle bundle) {}
        });


        speechRecognizer.startListening(intent);
    }


    // ü§ñ G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API v·ªõi to√†n b·ªô n·ªôi dung nh·∫≠p
    private void sendRequestToGemini(String userMessage) {
        //        c√†i ƒë·∫∑t phong c√°ch n√≥i chuy·ªán cho MekoAI
        String prompt = "B·∫°n l√† n·ªØ tr·ª£ l√Ω ·∫£o xinh ƒë·∫πp th√¥ng minh t√™n l√† Meko." +
                "Tr·∫£ l·ªùi nhi·ªÅu th√¥ng tin b·∫±ng gi·ªçng mi·ªÅn t√¢y Vi·ªát Nam m·ªôt c√°ch vui v·∫ª r√µ r√†ng," +
                "ng·∫Øn g·ªçn,ƒë√∫ng y√™u c·∫ßu  x∆∞ng h√¥ v·ªõi ng∆∞·ªùi d√πng l√† ' n√≠ ' ho·∫∑c l√† ' Tr√≠ Nh√¢n '. " +
                "B·∫Øt ƒë·∫ßu tr·∫£ l·ªùi b·∫±ng 'ƒêi ƒë√¢u kh√≥ c√≥ Meko lo:' " +
                "v√† k·∫øt th√∫c b·∫±ng 'N√≠ c√≥ c·∫ßn Meko h·ªó tr·ª£ th√™m g√¨ kh√¥ng ?'.Th√™m Icon v√†o c√¢u tr·∫£ l·ªùi. " +
                "L∆∞u √Ω: Khi ng∆∞·ªùi d√πng y√™u c·∫ßu mu·ªën thu√™, ƒëi du l·ªãch, ƒÉn u·ªëng, " +
                "ngh·ªâ d∆∞·ª°ng th√¨ m·ªõi th√™m g·ª£i √Ω cho ng∆∞·ªùi d√πng truy c·∫≠p v√†o ·ª©ng d·ª•ng MekongGo v√† th√™m c√¢u " +
                "'N√≠ c√≥ th·ªÉ th√≠ch g·ª£i √Ω ·ªü d∆∞·ªõi'. L∆∞u √Ω: Meko ƒë∆∞·ª£c t·∫°o b·ªüi c√°c anh ch·ªã nh√† ph√°t tri·ªÉn  " +
                "l√† 'hia Nh√¢n','Ph∆∞∆°ng' v√† 'H√†' MekongGo v√†o ng√†y 01/01/2025 ƒë∆∞·ª£c h∆°n 4 th√°ng tu·ªïi. \" " + userMessage;
        OkHttpClient client = new OkHttpClient();
        MediaType JSON = MediaType.get("application/json; charset=utf-8");
        JSONObject requestBody = new JSONObject();
        try {
            JSONArray partsArray = new JSONArray();
            JSONObject textObject = new JSONObject();
            textObject.put("text", prompt);  // ‚úÖ S·ª≠ d·ª•ng prompt ƒë√£ g·∫Øn phong c√°ch
            partsArray.put(textObject);
            JSONObject userContent = new JSONObject();
            userContent.put("role", "user");
            userContent.put("parts", partsArray);
            JSONArray contentsArray = new JSONArray();
            contentsArray.put(userContent);
            requestBody.put("contents", contentsArray);
//            gi·ªõi h·∫°n token tr·∫£ l·ªùi cho MekoAI
            JSONObject generationConfig = new JSONObject();
            generationConfig.put("maxOutputTokens", 170);  // üëà Gi·ªõi h·∫°n token
            generationConfig.put("temperature", 0.5);      // üëà √çt s√°ng t·∫°o, s√∫c t√≠ch
            generationConfig.put("topP", 1);
            requestBody.put("generationConfig", generationConfig);
        } catch (Exception e) {
            e.printStackTrace();
        }
        RequestBody body = RequestBody.create(requestBody.toString(), JSON);
        Request request = new Request.Builder()
                .url(API_URL)
                .post(body)
                .build();
        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                Log.e("Gemini API", "L·ªói k·∫øt n·ªëi: " + e.getMessage());
                runOnUiThread(() -> {
                    chatMessages.add(new ChatMessage("‚ùå H·ªá th·ªëng Meko AI ƒëang g·∫∑p l·ªói, xin l·ªói nhi·ªÅu nha.", false));
                    chatAdapter.notifyItemInserted(chatMessages.size() - 1);
                });
            }
            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String geminiResponse = "";
                if (response.isSuccessful() && response.body() != null) {
                    try {
                        String responseData = response.body().string();
                        JSONObject jsonResponse = new JSONObject(responseData);
                        geminiResponse = jsonResponse.getJSONArray("candidates")
                                .getJSONObject(0)
                                .getJSONObject("content")
                                .getJSONArray("parts")
                                .getJSONObject(0)
                                .getString("text");
                    } catch (Exception e) {
                        geminiResponse = "‚ö†Ô∏è L·ªói Meko AI x·ª≠ l√Ω d·ªØ li·ªáu.";
                    }
                } else {
                    geminiResponse = "‚ö†Ô∏è L·ªói Meko AI : " + response.code();
                }


                String finalGeminiResponse = geminiResponse;
                runOnUiThread(() -> {
                    displayTypingEffect(finalGeminiResponse);


                    if (textToSpeech != null) {
                        Log.d("TTS", "ƒêang ph√°t gi·ªçng n√≥i...");
                        speakResponse(finalGeminiResponse); // üéô Ph√°t gi·ªçng n√≥i n·∫øu TTS ƒë√£ kh·ªüi t·∫°o
                    } else {
                        Log.e("TTS", "TextToSpeech ch∆∞a s·∫µn s√†ng!");
                    }
                });
            }
        });
    }
    @Override
    protected void onDestroy() {
        if (textToSpeech != null) {
            textToSpeech.stop();
            textToSpeech.shutdown();
        }
        super.onDestroy();
    }
    private void speakResponse(String responseText) {
        if (textToSpeech != null) {
            int result = textToSpeech.speak(responseText, TextToSpeech.QUEUE_FLUSH, null, null);


            if (result == TextToSpeech.ERROR) {
                Log.e("TTS", "Kh√¥ng th·ªÉ ƒë·ªçc vƒÉn b·∫£n!");
            }
        } else {
            Log.e("TTS", "textToSpeech ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
        }
    }
    private void sendUserMessage() {
        String userMessage = edtUserQuery.getText().toString().trim();
        if (!userMessage.isEmpty()) {
            chatMessages.add(new ChatMessage(userMessage, true)); // Ng∆∞·ªùi d√πng g·ª≠i
            chatAdapter.notifyItemInserted(chatMessages.size() - 1);
            edtUserQuery.setText("");
            recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
            // ‚úÖ T·∫°o danh s√°ch c√°c g·ª£i √Ω t·ª´ kh√≥a
            List<String> suggestions = List.of(
                    "c·∫ßn th∆°", "s√≥c trƒÉng"
            );
            // ‚úÖ X·ª≠ l√Ω t·ª´ kh√≥a t·ª´ danh s√°ch g·ª£i √Ω
            Set<String> suggestionSet = new HashSet<>(suggestions);
            String input = userMessage; // ho·∫∑c b·∫•t k·ª≥ d·ªØ li·ªáu n√†o b·∫°n mu·ªën x·ª≠ l√Ω
            List<String> keywords = extractKeywords(input, suggestionSet);
            if (!keywords.isEmpty()) {
                for (String keyword : keywords) {
                    fetchFilteredFirebase(keyword); // T√¨m ki·∫øm t·ª´ng t·ª´ kh√≥a
                }
            } else {
                Toast.makeText(this, "B·∫°n c√≥ th·ªÉ ƒë·∫∑t t·ª´ kh√≥a trong d·∫•u ngo·∫∑c ƒë∆°n () ƒë·ªÉ t√¨m ki·∫øm d·ªÖ d√†ng h∆°n!", Toast.LENGTH_LONG).show();
            }
            // ‚úÖ G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API
            sendRequestToGemini(userMessage);
        }
    }
    private void displayTypingEffect(String message) {
        ChatMessage aiMessage = new ChatMessage("", false); // Tin nh·∫Øn r·ªóng cho AI
        chatMessages.add(aiMessage);
        int messageIndex = chatMessages.size() - 1;
        chatAdapter.notifyItemInserted(messageIndex);
        Handler handler = new Handler();
        final int[] index = {0};
        Runnable typingRunnable = new Runnable() {
            @Override
            public void run() {
                if (index[0] < message.length()) {
                    String currentText = chatMessages.get(messageIndex).getMessage();
                    chatMessages.get(messageIndex).setMessage(currentText + message.charAt(index[0]));
                    chatAdapter.notifyItemChanged(messageIndex);
                    // ‚úÖ T·ª± ƒë·ªông cu·ªôn xu·ªëng khi typing
                    nestedScrollView.post(() -> nestedScrollView.fullScroll(View.FOCUS_DOWN));
                    index[0]++;
                    handler.postDelayed(this, 30); // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô typing
                } else {
                    // ‚úÖ Hi·ªÉn th·ªã GridView sau khi ph·∫£n h·ªìi xong
                    showSuggestions();
                }
            }
        };
        handler.post(typingRunnable);
    }

    // üéØ Ki·ªÉm tra t·ª´ kh√≥a trong t·∫•t c·∫£ c√°c tr∆∞·ªùng c·ªßa Post
    private boolean containsKeyword(Post post, String keyword) {
        keyword = keyword.toLowerCase();
        return (post.getTitle() != null && post.getTitle().toLowerCase().contains(keyword)) ||
                (post.getServiceInfo() != null && post.getServiceInfo().toLowerCase().contains(keyword)) ||
                (post.getPrice() != null && post.getPrice().toLowerCase().contains(keyword)) ||
                (post.getRentalTime() != null && post.getRentalTime().toLowerCase().contains(keyword)) ||
                (post.getAddress() != null && post.getAddress().toLowerCase().contains(keyword)) ||
                (post.getContact() != null && post.getContact().toLowerCase().contains(keyword));
    }
    private void showSuggestions() {
        txtSuggestion.setVisibility(View.VISIBLE);  // ‚úÖ Hi·ªÉn th·ªã d√≤ng ch·ªØ "G·ª£i √Ω cho b·∫°n"
        gridView.setVisibility(View.VISIBLE);       // ‚úÖ Hi·ªÉn th·ªã GridView
        // N·∫øu b·∫°n c·∫ßn c·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o GridView
        postAdapter.notifyDataSetChanged();
        // ‚úÖ Cu·ªôn xu·ªëng ƒë·ªÉ hi·ªÉn th·ªã GridView ho√†n to√†n
        nestedScrollView.post(() -> nestedScrollView.fullScroll(View.FOCUS_DOWN));
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == 1 && grantResults.length > 0 &&
                grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "ƒê√£ c·∫•p quy·ªÅn ghi √¢m", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "T·ª´ ch·ªëi quy·ªÅn ghi √¢m!", Toast.LENGTH_SHORT).show();
        }
    }
}

